void tag_invoke(json::FromJsonTag<{{struct.full_name}}> /* tag */,
                {{struct.full_name}} &{%- if struct.members|length -%}target{%- else -%}/* target */{%- endif -%},
                boost::system::error_code &ec,
                const boost::json::value &{%- if struct.members|length -%}jvRoot{%- else -%}/* jvRoot */{%- endif -%})
{
    {% if struct.inner_root %}
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &outerRoot = jvRoot.get_object();

    const auto *jvInnerRoot = outerRoot.if_contains("{{struct.inner_root}}");
    if (jvInnerRoot == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::InnerRootMissing);
    }
    if (!jvInnerRoot->is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvInnerRoot->get_object();
    {% elif struct.members|length %}
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();
    {% endif %}

{% for field in struct.members %}
    {% if field.member_type == MemberType.BASIC -%}
    {% include 'field-basic.tmpl' indent content %}
    {%- elif field.member_type == MemberType.VECTOR -%}
    {% include 'field-vector.tmpl' indent content %}
    {%- elif field.member_type == MemberType.OPTIONAL -%}
    {% include 'field-optional.tmpl' indent content %}
    {%- elif field.member_type == MemberType.OPTIONAL_VECTOR -%}
    {% include 'field-optional-vector.tmpl' indent content %}
    {%- elif field.member_type == MemberType.VARIANT -%}
    {% include 'field-variant.tmpl' indent content %}
    {%- endif -%}
{% endfor %}
}
