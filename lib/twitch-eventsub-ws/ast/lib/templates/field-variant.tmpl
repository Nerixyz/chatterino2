{% if not field.tag -%}
static_assert(false, "{{field.name}} doesn't have a json_tag");
{%- endif %}
const auto *jv{{field.name}}Tag = root.if_contains("{{field.tag}}");
if (jv{{field.name}}Tag == nullptr)
{
    EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
}

auto {{field.name}}TagRes = boost::json::try_value_to<boost::json::string>(*jv{{field.name}}Tag);
if ({{field.name}}TagRes.has_error())
{
    ec = {{field.name}}TagRes.error();
    return;
}
std::string_view {{field.name}}Tag = *{{field.name}}TagRes;
{%- for type in field.variant_types %}

{%- if not loop.first %}else{% endif %} if ({{field.name}}Tag == {{type.name}}::TAG)
{
{%- if type.empty -%}
    target.{{field.name}}.emplace<{{type.name}}>();
{%- else -%}
    const auto *{{field.name}}Val = root.if_contains(detail::fieldFor<{{type.name}}>());
    if (!{{field.name}}Val)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }
    if (!json::fromJson(target.{{field.name}}.emplace<{{type.name}}>(), ec, *{{field.name}}Val))
    {
        return;
    }
{%- endif -%}
}
{%- endfor -%}
else
{
{%- if field.variant_fallback -%}
    target.{{field.name}}.emplace<{{field.variant_fallback}}>({{field.name}}Tag);
{%- else -%}
    EVENTSUB_INTO_BAIL_HERE(error::Kind::UnknownVariant);
{%- endif -%}
}
