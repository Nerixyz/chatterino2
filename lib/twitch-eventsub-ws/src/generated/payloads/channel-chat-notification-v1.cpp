// WARNING: This file is automatically generated. Any changes will be lost.
#include "twitch-eventsub-ws/chrono.hpp"  // IWYU pragma: keep
#include "twitch-eventsub-ws/detail/errors.hpp"
#include "twitch-eventsub-ws/detail/variant.hpp"  // IWYU pragma: keep
#include "twitch-eventsub-ws/json.hpp"
#include "twitch-eventsub-ws/payloads/channel-chat-notification-v1.hpp"

#include <boost/json.hpp>

namespace chatterino::eventsub::lib::payload::channel_chat_notification::v1 {

void tag_invoke(json::FromJsonTag<Badge> /* tag */, Badge &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvsetID = root.if_contains("set_id");
    if (jvsetID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.setID, ec, *jvsetID))
    {
        return;
    }
    const auto *jvid = root.if_contains("id");
    if (jvid == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.id, ec, *jvid))
    {
        return;
    }
    const auto *jvinfo = root.if_contains("info");
    if (jvinfo == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.info, ec, *jvinfo))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Cheermote> /* tag */, Cheermote &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvprefix = root.if_contains("prefix");
    if (jvprefix == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.prefix, ec, *jvprefix))
    {
        return;
    }
    const auto *jvbits = root.if_contains("bits");
    if (jvbits == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.bits, ec, *jvbits))
    {
        return;
    }
    const auto *jvtier = root.if_contains("tier");
    if (jvtier == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.tier, ec, *jvtier))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Emote> /* tag */, Emote &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvid = root.if_contains("id");
    if (jvid == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.id, ec, *jvid))
    {
        return;
    }
    const auto *jvemoteSetID = root.if_contains("emote_set_id");
    if (jvemoteSetID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.emoteSetID, ec, *jvemoteSetID))
    {
        return;
    }
    const auto *jvownerID = root.if_contains("owner_id");
    if (jvownerID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.ownerID, ec, *jvownerID))
    {
        return;
    }

    const auto *jvformat = root.if_contains("format");
    if (jvformat != nullptr && !jvformat->is_null())
    {
        if (!json::fromJson(target.format, ec, *jvformat))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<Mention> /* tag */, Mention &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<MessageFragment> /* tag */,
                MessageFragment &target, boost::system::error_code &ec,
                const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvtype = root.if_contains("type");
    if (jvtype == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.type, ec, *jvtype))
    {
        return;
    }
    const auto *jvtext = root.if_contains("text");
    if (jvtext == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.text, ec, *jvtext))
    {
        return;
    }
    const auto *jvcheermote = root.if_contains("cheermote");
    if (jvcheermote != nullptr && !jvcheermote->is_null())
    {
        if (!json::fromJson(target.cheermote.emplace(), ec, *jvcheermote))
        {
            return;
        }
    }

    const auto *jvemote = root.if_contains("emote");
    if (jvemote != nullptr && !jvemote->is_null())
    {
        if (!json::fromJson(target.emote.emplace(), ec, *jvemote))
        {
            return;
        }
    }

    const auto *jvmention = root.if_contains("mention");
    if (jvmention != nullptr && !jvmention->is_null())
    {
        if (!json::fromJson(target.mention.emplace(), ec, *jvmention))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<Subcription> /* tag */, Subcription &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvsubTier = root.if_contains("sub_tier");
    if (jvsubTier == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.subTier, ec, *jvsubTier))
    {
        return;
    }
    const auto *jvisPrime = root.if_contains("is_prime");
    if (jvisPrime == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.isPrime, ec, *jvisPrime))
    {
        return;
    }
    const auto *jvdurationMonths = root.if_contains("duration_months");
    if (jvdurationMonths == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.durationMonths, ec, *jvdurationMonths))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Resubscription> /* tag */,
                Resubscription &target, boost::system::error_code &ec,
                const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvcumulativeMonths = root.if_contains("cumulative_months");
    if (jvcumulativeMonths == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.cumulativeMonths, ec, *jvcumulativeMonths))
    {
        return;
    }
    const auto *jvdurationMonths = root.if_contains("duration_months");
    if (jvdurationMonths == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.durationMonths, ec, *jvdurationMonths))
    {
        return;
    }
    const auto *jvstreakMonths = root.if_contains("streak_months");
    if (jvstreakMonths != nullptr && !jvstreakMonths->is_null())
    {
        if (!json::fromJson(target.streakMonths.emplace(), ec, *jvstreakMonths))
        {
            return;
        }
    }

    const auto *jvsubTier = root.if_contains("sub_tier");
    if (jvsubTier == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.subTier, ec, *jvsubTier))
    {
        return;
    }
    const auto *jvisPrime = root.if_contains("is_prime");
    if (jvisPrime != nullptr && !jvisPrime->is_null())
    {
        if (!json::fromJson(target.isPrime.emplace(), ec, *jvisPrime))
        {
            return;
        }
    }

    const auto *jvisGift = root.if_contains("is_gift");
    if (jvisGift == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.isGift, ec, *jvisGift))
    {
        return;
    }
    const auto *jvgifterIsAnonymous = root.if_contains("gifter_is_anonymous");
    if (jvgifterIsAnonymous != nullptr && !jvgifterIsAnonymous->is_null())
    {
        if (!json::fromJson(target.gifterIsAnonymous.emplace(), ec,
                            *jvgifterIsAnonymous))
        {
            return;
        }
    }

    const auto *jvgifterUserID = root.if_contains("gifter_user_id");
    if (jvgifterUserID != nullptr && !jvgifterUserID->is_null())
    {
        if (!json::fromJson(target.gifterUserID.emplace(), ec, *jvgifterUserID))
        {
            return;
        }
    }

    const auto *jvgifterUserName = root.if_contains("gifter_user_name");
    if (jvgifterUserName != nullptr && !jvgifterUserName->is_null())
    {
        if (!json::fromJson(target.gifterUserName.emplace(), ec,
                            *jvgifterUserName))
        {
            return;
        }
    }

    const auto *jvgifterUserLogin = root.if_contains("gifter_user_login");
    if (jvgifterUserLogin != nullptr && !jvgifterUserLogin->is_null())
    {
        if (!json::fromJson(target.gifterUserLogin.emplace(), ec,
                            *jvgifterUserLogin))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<GiftSubscription> /* tag */,
                GiftSubscription &target, boost::system::error_code &ec,
                const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvdurationMonths = root.if_contains("duration_months");
    if (jvdurationMonths == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.durationMonths, ec, *jvdurationMonths))
    {
        return;
    }
    const auto *jvcumulativeTotal = root.if_contains("cumulative_total");
    if (jvcumulativeTotal != nullptr && !jvcumulativeTotal->is_null())
    {
        if (!json::fromJson(target.cumulativeTotal.emplace(), ec,
                            *jvcumulativeTotal))
        {
            return;
        }
    }

    const auto *jvstreakMonths = root.if_contains("streak_months");
    if (jvstreakMonths != nullptr && !jvstreakMonths->is_null())
    {
        if (!json::fromJson(target.streakMonths.emplace(), ec, *jvstreakMonths))
        {
            return;
        }
    }

    const auto *jvrecipientUserID = root.if_contains("recipient_user_id");
    if (jvrecipientUserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.recipientUserID, ec, *jvrecipientUserID))
    {
        return;
    }
    const auto *jvrecipientUserName = root.if_contains("recipient_user_name");
    if (jvrecipientUserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.recipientUserName, ec, *jvrecipientUserName))
    {
        return;
    }
    const auto *jvrecipientUserLogin = root.if_contains("recipient_user_login");
    if (jvrecipientUserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.recipientUserLogin, ec, *jvrecipientUserLogin))
    {
        return;
    }
    const auto *jvsubTier = root.if_contains("sub_tier");
    if (jvsubTier == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.subTier, ec, *jvsubTier))
    {
        return;
    }
    const auto *jvcommunityGiftID = root.if_contains("community_gift_id");
    if (jvcommunityGiftID != nullptr && !jvcommunityGiftID->is_null())
    {
        if (!json::fromJson(target.communityGiftID.emplace(), ec,
                            *jvcommunityGiftID))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<CommunityGiftSubscription> /* tag */,
                CommunityGiftSubscription &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvid = root.if_contains("id");
    if (jvid == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.id, ec, *jvid))
    {
        return;
    }
    const auto *jvtotal = root.if_contains("total");
    if (jvtotal == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.total, ec, *jvtotal))
    {
        return;
    }
    const auto *jvsubTier = root.if_contains("sub_tier");
    if (jvsubTier == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.subTier, ec, *jvsubTier))
    {
        return;
    }
    const auto *jvcumulativeTotal = root.if_contains("cumulative_total");
    if (jvcumulativeTotal != nullptr && !jvcumulativeTotal->is_null())
    {
        if (!json::fromJson(target.cumulativeTotal.emplace(), ec,
                            *jvcumulativeTotal))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<GiftPaidUpgrade> /* tag */,
                GiftPaidUpgrade &target, boost::system::error_code &ec,
                const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvgifterIsAnonymous = root.if_contains("gifter_is_anonymous");
    if (jvgifterIsAnonymous == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.gifterIsAnonymous, ec, *jvgifterIsAnonymous))
    {
        return;
    }
    const auto *jvgifterUserID = root.if_contains("gifter_user_id");
    if (jvgifterUserID != nullptr && !jvgifterUserID->is_null())
    {
        if (!json::fromJson(target.gifterUserID.emplace(), ec, *jvgifterUserID))
        {
            return;
        }
    }

    const auto *jvgifterUserName = root.if_contains("gifter_user_name");
    if (jvgifterUserName != nullptr && !jvgifterUserName->is_null())
    {
        if (!json::fromJson(target.gifterUserName.emplace(), ec,
                            *jvgifterUserName))
        {
            return;
        }
    }

    const auto *jvgifterUserLogin = root.if_contains("gifter_user_login");
    if (jvgifterUserLogin != nullptr && !jvgifterUserLogin->is_null())
    {
        if (!json::fromJson(target.gifterUserLogin.emplace(), ec,
                            *jvgifterUserLogin))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<PrimePaidUpgrade> /* tag */,
                PrimePaidUpgrade &target, boost::system::error_code &ec,
                const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvsubTier = root.if_contains("sub_tier");
    if (jvsubTier == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.subTier, ec, *jvsubTier))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Raid> /* tag */, Raid &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvviewerCount = root.if_contains("viewer_count");
    if (jvviewerCount == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.viewerCount, ec, *jvviewerCount))
    {
        return;
    }
    const auto *jvprofileImageURL = root.if_contains("profile_image_url");
    if (jvprofileImageURL == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.profileImageURL, ec, *jvprofileImageURL))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Unraid> /* tag */, Unraid & /* target */,
                boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<PayItForward> /* tag */, PayItForward &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvgifterIsAnonymous = root.if_contains("gifter_is_anonymous");
    if (jvgifterIsAnonymous == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.gifterIsAnonymous, ec, *jvgifterIsAnonymous))
    {
        return;
    }
    const auto *jvgifterUserID = root.if_contains("gifter_user_id");
    if (jvgifterUserID != nullptr && !jvgifterUserID->is_null())
    {
        if (!json::fromJson(target.gifterUserID.emplace(), ec, *jvgifterUserID))
        {
            return;
        }
    }

    const auto *jvgifterUserName = root.if_contains("gifter_user_name");
    if (jvgifterUserName != nullptr && !jvgifterUserName->is_null())
    {
        if (!json::fromJson(target.gifterUserName.emplace(), ec,
                            *jvgifterUserName))
        {
            return;
        }
    }

    const auto *jvgifterUserLogin = root.if_contains("gifter_user_login");
    if (jvgifterUserLogin != nullptr && !jvgifterUserLogin->is_null())
    {
        if (!json::fromJson(target.gifterUserLogin.emplace(), ec,
                            *jvgifterUserLogin))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<Announcement> /* tag */, Announcement &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvcolor = root.if_contains("color");
    if (jvcolor == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.color, ec, *jvcolor))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<CharityDonationAmount> /* tag */,
                CharityDonationAmount &target, boost::system::error_code &ec,
                const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvvalue = root.if_contains("value");
    if (jvvalue == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.value, ec, *jvvalue))
    {
        return;
    }
    const auto *jvdecimalPlaces = root.if_contains("decimal_places");
    if (jvdecimalPlaces == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.decimalPlaces, ec, *jvdecimalPlaces))
    {
        return;
    }
    const auto *jvcurrency = root.if_contains("currency");
    if (jvcurrency == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.currency, ec, *jvcurrency))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<CharityDonation> /* tag */,
                CharityDonation &target, boost::system::error_code &ec,
                const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvcharityName = root.if_contains("charity_name");
    if (jvcharityName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.charityName, ec, *jvcharityName))
    {
        return;
    }
    const auto *jvamount = root.if_contains("amount");
    if (jvamount == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.amount, ec, *jvamount))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<BitsBadgeTier> /* tag */,
                BitsBadgeTier &target, boost::system::error_code &ec,
                const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvtier = root.if_contains("tier");
    if (jvtier == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.tier, ec, *jvtier))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Message> /* tag */, Message &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvtext = root.if_contains("text");
    if (jvtext == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.text, ec, *jvtext))
    {
        return;
    }

    const auto *jvfragments = root.if_contains("fragments");
    if (jvfragments != nullptr && !jvfragments->is_null())
    {
        if (!json::fromJson(target.fragments, ec, *jvfragments))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<Event> /* tag */, Event &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvbroadcasterUserID = root.if_contains("broadcaster_user_id");
    if (jvbroadcasterUserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.broadcasterUserID, ec, *jvbroadcasterUserID))
    {
        return;
    }
    const auto *jvbroadcasterUserLogin =
        root.if_contains("broadcaster_user_login");
    if (jvbroadcasterUserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.broadcasterUserLogin, ec,
                        *jvbroadcasterUserLogin))
    {
        return;
    }
    const auto *jvbroadcasterUserName =
        root.if_contains("broadcaster_user_name");
    if (jvbroadcasterUserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.broadcasterUserName, ec, *jvbroadcasterUserName))
    {
        return;
    }
    const auto *jvchatterUserID = root.if_contains("chatter_user_id");
    if (jvchatterUserID != nullptr && !jvchatterUserID->is_null())
    {
        if (!json::fromJson(target.chatterUserID.emplace(), ec,
                            *jvchatterUserID))
        {
            return;
        }
    }

    const auto *jvchatterUserLogin = root.if_contains("chatter_user_login");
    if (jvchatterUserLogin != nullptr && !jvchatterUserLogin->is_null())
    {
        if (!json::fromJson(target.chatterUserLogin.emplace(), ec,
                            *jvchatterUserLogin))
        {
            return;
        }
    }

    const auto *jvchatterUserName = root.if_contains("chatter_user_name");
    if (jvchatterUserName != nullptr && !jvchatterUserName->is_null())
    {
        if (!json::fromJson(target.chatterUserName.emplace(), ec,
                            *jvchatterUserName))
        {
            return;
        }
    }

    const auto *jvchatterIsAnonymous = root.if_contains("chatter_is_anonymous");
    if (jvchatterIsAnonymous == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.chatterIsAnonymous, ec, *jvchatterIsAnonymous))
    {
        return;
    }
    const auto *jvcolor = root.if_contains("color");
    if (jvcolor == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.color, ec, *jvcolor))
    {
        return;
    }

    const auto *jvbadges = root.if_contains("badges");
    if (jvbadges != nullptr && !jvbadges->is_null())
    {
        if (!json::fromJson(target.badges, ec, *jvbadges))
        {
            return;
        }
    }
    const auto *jvsystemMessage = root.if_contains("system_message");
    if (jvsystemMessage == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.systemMessage, ec, *jvsystemMessage))
    {
        return;
    }
    const auto *jvmessageID = root.if_contains("message_id");
    if (jvmessageID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.messageID, ec, *jvmessageID))
    {
        return;
    }
    const auto *jvmessage = root.if_contains("message");
    if (jvmessage == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.message, ec, *jvmessage))
    {
        return;
    }

    const auto *jvinnerTag = root.if_contains("notice_type");
    if (jvinnerTag == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    auto innerTagRes =
        boost::json::try_value_to<boost::json::string>(*jvinnerTag);
    if (innerTagRes.has_error())
    {
        ec = innerTagRes.error();
        return;
    }
    std::string_view innerTag = *innerTagRes;
    if (innerTag == Subcription::TAG)
    {
        const auto *innerVal =
            root.if_contains(detail::fieldFor<Subcription>());
        if (!innerVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.inner.emplace<Subcription>(), ec, *innerVal))
        {
            return;
        }
    }
    else if (innerTag == Resubscription::TAG)
    {
        const auto *innerVal =
            root.if_contains(detail::fieldFor<Resubscription>());
        if (!innerVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.inner.emplace<Resubscription>(), ec,
                            *innerVal))
        {
            return;
        }
    }
    else if (innerTag == GiftSubscription::TAG)
    {
        const auto *innerVal =
            root.if_contains(detail::fieldFor<GiftSubscription>());
        if (!innerVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.inner.emplace<GiftSubscription>(), ec,
                            *innerVal))
        {
            return;
        }
    }
    else if (innerTag == CommunityGiftSubscription::TAG)
    {
        const auto *innerVal =
            root.if_contains(detail::fieldFor<CommunityGiftSubscription>());
        if (!innerVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.inner.emplace<CommunityGiftSubscription>(),
                            ec, *innerVal))
        {
            return;
        }
    }
    else if (innerTag == GiftPaidUpgrade::TAG)
    {
        const auto *innerVal =
            root.if_contains(detail::fieldFor<GiftPaidUpgrade>());
        if (!innerVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.inner.emplace<GiftPaidUpgrade>(), ec,
                            *innerVal))
        {
            return;
        }
    }
    else if (innerTag == PrimePaidUpgrade::TAG)
    {
        const auto *innerVal =
            root.if_contains(detail::fieldFor<PrimePaidUpgrade>());
        if (!innerVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.inner.emplace<PrimePaidUpgrade>(), ec,
                            *innerVal))
        {
            return;
        }
    }
    else if (innerTag == Raid::TAG)
    {
        const auto *innerVal = root.if_contains(detail::fieldFor<Raid>());
        if (!innerVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.inner.emplace<Raid>(), ec, *innerVal))
        {
            return;
        }
    }
    else if (innerTag == Unraid::TAG)
    {
        target.inner.emplace<Unraid>();
    }
    else if (innerTag == PayItForward::TAG)
    {
        const auto *innerVal =
            root.if_contains(detail::fieldFor<PayItForward>());
        if (!innerVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.inner.emplace<PayItForward>(), ec,
                            *innerVal))
        {
            return;
        }
    }
    else if (innerTag == Announcement::TAG)
    {
        const auto *innerVal =
            root.if_contains(detail::fieldFor<Announcement>());
        if (!innerVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.inner.emplace<Announcement>(), ec,
                            *innerVal))
        {
            return;
        }
    }
    else if (innerTag == CharityDonation::TAG)
    {
        const auto *innerVal =
            root.if_contains(detail::fieldFor<CharityDonation>());
        if (!innerVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.inner.emplace<CharityDonation>(), ec,
                            *innerVal))
        {
            return;
        }
    }
    else if (innerTag == BitsBadgeTier::TAG)
    {
        const auto *innerVal =
            root.if_contains(detail::fieldFor<BitsBadgeTier>());
        if (!innerVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.inner.emplace<BitsBadgeTier>(), ec,
                            *innerVal))
        {
            return;
        }
    }
    else
    {
        target.inner.emplace<std::string>(innerTag);
    }
}

void tag_invoke(json::FromJsonTag<Payload> /* tag */, Payload &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvsubscription = root.if_contains("subscription");
    if (jvsubscription == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.subscription, ec, *jvsubscription))
    {
        return;
    }
    const auto *jvevent = root.if_contains("event");
    if (jvevent == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.event, ec, *jvevent))
    {
        return;
    }
}

}  // namespace chatterino::eventsub::lib::payload::channel_chat_notification::v1
