// WARNING: This file is automatically generated. Any changes will be lost.
#include "twitch-eventsub-ws/chrono.hpp"  // IWYU pragma: keep
#include "twitch-eventsub-ws/detail/errors.hpp"
#include "twitch-eventsub-ws/detail/variant.hpp"  // IWYU pragma: keep
#include "twitch-eventsub-ws/json.hpp"
#include "twitch-eventsub-ws/payloads/channel-moderate-v2.hpp"

#include <boost/json.hpp>

namespace chatterino::eventsub::lib::payload::channel_moderate::v2 {

void tag_invoke(json::FromJsonTag<Followers> /* tag */, Followers &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvfollowDurationMinutes =
        root.if_contains("follow_duration_minutes");
    if (jvfollowDurationMinutes == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.followDurationMinutes, ec,
                        *jvfollowDurationMinutes))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<FollowersOff> /* tag */,
                FollowersOff & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<Slow> /* tag */, Slow &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvwaitTimeSeconds = root.if_contains("wait_time_seconds");
    if (jvwaitTimeSeconds == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.waitTimeSeconds, ec, *jvwaitTimeSeconds))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<SlowOff> /* tag */, SlowOff & /* target */,
                boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<Vip> /* tag */, Vip &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Unvip> /* tag */, Unvip &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Mod> /* tag */, Mod &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Unmod> /* tag */, Unmod &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Ban> /* tag */, Ban &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
    const auto *jvreason = root.if_contains("reason");
    if (jvreason == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.reason, ec, *jvreason))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<SharedChatBan> /* tag */,
                SharedChatBan & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<Unban> /* tag */, Unban &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<SharedChatUnban> /* tag */,
                SharedChatUnban & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<Timeout> /* tag */, Timeout &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
    const auto *jvreason = root.if_contains("reason");
    if (jvreason == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.reason, ec, *jvreason))
    {
        return;
    }
    const auto *jvexpiresAt = root.if_contains("expires_at");
    if (jvexpiresAt == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.expiresAt, ec, *jvexpiresAt))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<SharedChatTimeout> /* tag */,
                SharedChatTimeout & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<Untimeout> /* tag */, Untimeout &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<SharedChatUntimeout> /* tag */,
                SharedChatUntimeout & /* target */,
                boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<Raid> /* tag */, Raid &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
    const auto *jvviewerCount = root.if_contains("viewer_count");
    if (jvviewerCount == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.viewerCount, ec, *jvviewerCount))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Unraid> /* tag */, Unraid &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Delete> /* tag */, Delete &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
    const auto *jvmessageID = root.if_contains("message_id");
    if (jvmessageID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.messageID, ec, *jvmessageID))
    {
        return;
    }
    const auto *jvmessageBody = root.if_contains("message_body");
    if (jvmessageBody == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.messageBody, ec, *jvmessageBody))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<SharedChatDelete> /* tag */,
                SharedChatDelete & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<AutomodTerms> /* tag */, AutomodTerms &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvaction = root.if_contains("action");
    if (jvaction == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.action, ec, *jvaction))
    {
        return;
    }
    const auto *jvlist = root.if_contains("list");
    if (jvlist == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.list, ec, *jvlist))
    {
        return;
    }

    const auto *jvterms = root.if_contains("terms");
    if (jvterms != nullptr && !jvterms->is_null())
    {
        if (!json::fromJson(target.terms, ec, *jvterms))
        {
            return;
        }
    }
    const auto *jvfromAutomod = root.if_contains("from_automod");
    if (jvfromAutomod == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.fromAutomod, ec, *jvfromAutomod))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<AddBlockedTerm> /* tag */,
                AddBlockedTerm & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<AddPermittedTerm> /* tag */,
                AddPermittedTerm & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<RemoveBlockedTerm> /* tag */,
                RemoveBlockedTerm & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<RemovePermittedTerm> /* tag */,
                RemovePermittedTerm & /* target */,
                boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<UnbanRequest> /* tag */, UnbanRequest &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvisApproved = root.if_contains("is_approved");
    if (jvisApproved == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.isApproved, ec, *jvisApproved))
    {
        return;
    }
    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
    const auto *jvmoderatorMessage = root.if_contains("moderator_message");
    if (jvmoderatorMessage == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.moderatorMessage, ec, *jvmoderatorMessage))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<ApproveUnbanRequest> /* tag */,
                ApproveUnbanRequest & /* target */,
                boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<DenyUnbanRequest> /* tag */,
                DenyUnbanRequest & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<Warn> /* tag */, Warn &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
    const auto *jvreason = root.if_contains("reason");
    if (jvreason == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.reason, ec, *jvreason))
    {
        return;
    }

    const auto *jvchatRulesCited = root.if_contains("chat_rules_cited");
    if (jvchatRulesCited != nullptr && !jvchatRulesCited->is_null())
    {
        if (!json::fromJson(target.chatRulesCited, ec, *jvchatRulesCited))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<Clear> /* tag */, Clear & /* target */,
                boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<EmoteOnly> /* tag */,
                EmoteOnly & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<EmoteOnlyOff> /* tag */,
                EmoteOnlyOff & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<Uniquechat> /* tag */,
                Uniquechat & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<UniquechatOff> /* tag */,
                UniquechatOff & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<Subscribers> /* tag */,
                Subscribers & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<SubscribersOff> /* tag */,
                SubscribersOff & /* target */, boost::system::error_code &ec,
                const boost::json::value & /* jvRoot */)
{
}

void tag_invoke(json::FromJsonTag<Event> /* tag */, Event &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvbroadcasterUserID = root.if_contains("broadcaster_user_id");
    if (jvbroadcasterUserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.broadcasterUserID, ec, *jvbroadcasterUserID))
    {
        return;
    }
    const auto *jvbroadcasterUserLogin =
        root.if_contains("broadcaster_user_login");
    if (jvbroadcasterUserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.broadcasterUserLogin, ec,
                        *jvbroadcasterUserLogin))
    {
        return;
    }
    const auto *jvbroadcasterUserName =
        root.if_contains("broadcaster_user_name");
    if (jvbroadcasterUserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.broadcasterUserName, ec, *jvbroadcasterUserName))
    {
        return;
    }
    const auto *jvsourceBroadcasterUserID =
        root.if_contains("source_broadcaster_user_id");
    if (jvsourceBroadcasterUserID != nullptr &&
        !jvsourceBroadcasterUserID->is_null())
    {
        if (!json::fromJson(target.sourceBroadcasterUserID.emplace(), ec,
                            *jvsourceBroadcasterUserID))
        {
            return;
        }
    }

    const auto *jvsourceBroadcasterUserLogin =
        root.if_contains("source_broadcaster_user_login");
    if (jvsourceBroadcasterUserLogin != nullptr &&
        !jvsourceBroadcasterUserLogin->is_null())
    {
        if (!json::fromJson(target.sourceBroadcasterUserLogin.emplace(), ec,
                            *jvsourceBroadcasterUserLogin))
        {
            return;
        }
    }

    const auto *jvsourceBroadcasterUserName =
        root.if_contains("source_broadcaster_user_name");
    if (jvsourceBroadcasterUserName != nullptr &&
        !jvsourceBroadcasterUserName->is_null())
    {
        if (!json::fromJson(target.sourceBroadcasterUserName.emplace(), ec,
                            *jvsourceBroadcasterUserName))
        {
            return;
        }
    }

    const auto *jvmoderatorUserID = root.if_contains("moderator_user_id");
    if (jvmoderatorUserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.moderatorUserID, ec, *jvmoderatorUserID))
    {
        return;
    }
    const auto *jvmoderatorUserLogin = root.if_contains("moderator_user_login");
    if (jvmoderatorUserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.moderatorUserLogin, ec, *jvmoderatorUserLogin))
    {
        return;
    }
    const auto *jvmoderatorUserName = root.if_contains("moderator_user_name");
    if (jvmoderatorUserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.moderatorUserName, ec, *jvmoderatorUserName))
    {
        return;
    }

    const auto *jvactionTag = root.if_contains("action");
    if (jvactionTag == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    auto actionTagRes =
        boost::json::try_value_to<boost::json::string>(*jvactionTag);
    if (actionTagRes.has_error())
    {
        ec = actionTagRes.error();
        return;
    }
    std::string_view actionTag = *actionTagRes;
    if (actionTag == Ban::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Ban>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Ban>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == Timeout::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Timeout>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Timeout>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == Unban::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Unban>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Unban>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == Untimeout::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Untimeout>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Untimeout>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == Clear::TAG)
    {
        target.action.emplace<Clear>();
    }
    else if (actionTag == EmoteOnly::TAG)
    {
        target.action.emplace<EmoteOnly>();
    }
    else if (actionTag == EmoteOnlyOff::TAG)
    {
        target.action.emplace<EmoteOnlyOff>();
    }
    else if (actionTag == Followers::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Followers>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Followers>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == FollowersOff::TAG)
    {
        target.action.emplace<FollowersOff>();
    }
    else if (actionTag == Uniquechat::TAG)
    {
        target.action.emplace<Uniquechat>();
    }
    else if (actionTag == UniquechatOff::TAG)
    {
        target.action.emplace<UniquechatOff>();
    }
    else if (actionTag == Slow::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Slow>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Slow>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == SlowOff::TAG)
    {
        target.action.emplace<SlowOff>();
    }
    else if (actionTag == Subscribers::TAG)
    {
        target.action.emplace<Subscribers>();
    }
    else if (actionTag == SubscribersOff::TAG)
    {
        target.action.emplace<SubscribersOff>();
    }
    else if (actionTag == Unraid::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Unraid>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Unraid>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == Delete::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Delete>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Delete>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == Unvip::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Unvip>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Unvip>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == Vip::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Vip>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Vip>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == Raid::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Raid>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Raid>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == AddBlockedTerm::TAG)
    {
        target.action.emplace<AddBlockedTerm>();
    }
    else if (actionTag == AddPermittedTerm::TAG)
    {
        target.action.emplace<AddPermittedTerm>();
    }
    else if (actionTag == RemoveBlockedTerm::TAG)
    {
        target.action.emplace<RemoveBlockedTerm>();
    }
    else if (actionTag == RemovePermittedTerm::TAG)
    {
        target.action.emplace<RemovePermittedTerm>();
    }
    else if (actionTag == Mod::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Mod>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Mod>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == Unmod::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Unmod>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Unmod>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == ApproveUnbanRequest::TAG)
    {
        target.action.emplace<ApproveUnbanRequest>();
    }
    else if (actionTag == DenyUnbanRequest::TAG)
    {
        target.action.emplace<DenyUnbanRequest>();
    }
    else if (actionTag == Warn::TAG)
    {
        const auto *actionVal = root.if_contains(detail::fieldFor<Warn>());
        if (!actionVal)
        {
            EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
        }
        if (!json::fromJson(target.action.emplace<Warn>(), ec, *actionVal))
        {
            return;
        }
    }
    else if (actionTag == SharedChatBan::TAG)
    {
        target.action.emplace<SharedChatBan>();
    }
    else if (actionTag == SharedChatTimeout::TAG)
    {
        target.action.emplace<SharedChatTimeout>();
    }
    else if (actionTag == SharedChatUnban::TAG)
    {
        target.action.emplace<SharedChatUnban>();
    }
    else if (actionTag == SharedChatUntimeout::TAG)
    {
        target.action.emplace<SharedChatUntimeout>();
    }
    else if (actionTag == SharedChatDelete::TAG)
    {
        target.action.emplace<SharedChatDelete>();
    }
    else
    {
        target.action.emplace<std::string>(actionTag);
    }
}

void tag_invoke(json::FromJsonTag<Payload> /* tag */, Payload &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvsubscription = root.if_contains("subscription");
    if (jvsubscription == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.subscription, ec, *jvsubscription))
    {
        return;
    }
    const auto *jvevent = root.if_contains("event");
    if (jvevent == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.event, ec, *jvevent))
    {
        return;
    }
}

}  // namespace chatterino::eventsub::lib::payload::channel_moderate::v2
