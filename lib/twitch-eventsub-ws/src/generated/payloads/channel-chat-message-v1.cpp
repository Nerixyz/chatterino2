// WARNING: This file is automatically generated. Any changes will be lost.
#include "twitch-eventsub-ws/chrono.hpp"  // IWYU pragma: keep
#include "twitch-eventsub-ws/detail/errors.hpp"
#include "twitch-eventsub-ws/detail/variant.hpp"  // IWYU pragma: keep
#include "twitch-eventsub-ws/json.hpp"
#include "twitch-eventsub-ws/payloads/channel-chat-message-v1.hpp"

#include <boost/json.hpp>

namespace chatterino::eventsub::lib::payload::channel_chat_message::v1 {

void tag_invoke(json::FromJsonTag<Badge> /* tag */, Badge &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvsetID = root.if_contains("set_id");
    if (jvsetID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.setID, ec, *jvsetID))
    {
        return;
    }
    const auto *jvid = root.if_contains("id");
    if (jvid == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.id, ec, *jvid))
    {
        return;
    }
    const auto *jvinfo = root.if_contains("info");
    if (jvinfo == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.info, ec, *jvinfo))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Cheermote> /* tag */, Cheermote &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvprefix = root.if_contains("prefix");
    if (jvprefix == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.prefix, ec, *jvprefix))
    {
        return;
    }
    const auto *jvbits = root.if_contains("bits");
    if (jvbits == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.bits, ec, *jvbits))
    {
        return;
    }
    const auto *jvtier = root.if_contains("tier");
    if (jvtier == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.tier, ec, *jvtier))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Emote> /* tag */, Emote &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvid = root.if_contains("id");
    if (jvid == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.id, ec, *jvid))
    {
        return;
    }
    const auto *jvemoteSetID = root.if_contains("emote_set_id");
    if (jvemoteSetID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.emoteSetID, ec, *jvemoteSetID))
    {
        return;
    }
    const auto *jvownerID = root.if_contains("owner_id");
    if (jvownerID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.ownerID, ec, *jvownerID))
    {
        return;
    }

    const auto *jvformat = root.if_contains("format");
    if (jvformat != nullptr && !jvformat->is_null())
    {
        if (!json::fromJson(target.format, ec, *jvformat))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<Mention> /* tag */, Mention &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvuserID = root.if_contains("user_id");
    if (jvuserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userID, ec, *jvuserID))
    {
        return;
    }
    const auto *jvuserName = root.if_contains("user_name");
    if (jvuserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userName, ec, *jvuserName))
    {
        return;
    }
    const auto *jvuserLogin = root.if_contains("user_login");
    if (jvuserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.userLogin, ec, *jvuserLogin))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<MessageFragment> /* tag */,
                MessageFragment &target, boost::system::error_code &ec,
                const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvtype = root.if_contains("type");
    if (jvtype == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.type, ec, *jvtype))
    {
        return;
    }
    const auto *jvtext = root.if_contains("text");
    if (jvtext == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.text, ec, *jvtext))
    {
        return;
    }
    const auto *jvcheermote = root.if_contains("cheermote");
    if (jvcheermote != nullptr && !jvcheermote->is_null())
    {
        if (!json::fromJson(target.cheermote.emplace(), ec, *jvcheermote))
        {
            return;
        }
    }

    const auto *jvemote = root.if_contains("emote");
    if (jvemote != nullptr && !jvemote->is_null())
    {
        if (!json::fromJson(target.emote.emplace(), ec, *jvemote))
        {
            return;
        }
    }

    const auto *jvmention = root.if_contains("mention");
    if (jvmention != nullptr && !jvmention->is_null())
    {
        if (!json::fromJson(target.mention.emplace(), ec, *jvmention))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<Message> /* tag */, Message &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvtext = root.if_contains("text");
    if (jvtext == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.text, ec, *jvtext))
    {
        return;
    }

    const auto *jvfragments = root.if_contains("fragments");
    if (jvfragments != nullptr && !jvfragments->is_null())
    {
        if (!json::fromJson(target.fragments, ec, *jvfragments))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<Cheer> /* tag */, Cheer &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvbits = root.if_contains("bits");
    if (jvbits == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.bits, ec, *jvbits))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Reply> /* tag */, Reply &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvparentMessageID = root.if_contains("parent_message_id");
    if (jvparentMessageID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.parentMessageID, ec, *jvparentMessageID))
    {
        return;
    }
    const auto *jvparentUserID = root.if_contains("parent_user_id");
    if (jvparentUserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.parentUserID, ec, *jvparentUserID))
    {
        return;
    }
    const auto *jvparentUserLogin = root.if_contains("parent_user_login");
    if (jvparentUserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.parentUserLogin, ec, *jvparentUserLogin))
    {
        return;
    }
    const auto *jvparentUserName = root.if_contains("parent_user_name");
    if (jvparentUserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.parentUserName, ec, *jvparentUserName))
    {
        return;
    }
    const auto *jvparentMessageBody = root.if_contains("parent_message_body");
    if (jvparentMessageBody == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.parentMessageBody, ec, *jvparentMessageBody))
    {
        return;
    }
    const auto *jvthreadMessageID = root.if_contains("thread_message_id");
    if (jvthreadMessageID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.threadMessageID, ec, *jvthreadMessageID))
    {
        return;
    }
    const auto *jvthreadUserID = root.if_contains("thread_user_id");
    if (jvthreadUserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.threadUserID, ec, *jvthreadUserID))
    {
        return;
    }
    const auto *jvthreadUserLogin = root.if_contains("thread_user_login");
    if (jvthreadUserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.threadUserLogin, ec, *jvthreadUserLogin))
    {
        return;
    }
    const auto *jvthreadUserName = root.if_contains("thread_user_name");
    if (jvthreadUserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.threadUserName, ec, *jvthreadUserName))
    {
        return;
    }
}

void tag_invoke(json::FromJsonTag<Event> /* tag */, Event &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvbroadcasterUserID = root.if_contains("broadcaster_user_id");
    if (jvbroadcasterUserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.broadcasterUserID, ec, *jvbroadcasterUserID))
    {
        return;
    }
    const auto *jvbroadcasterUserLogin =
        root.if_contains("broadcaster_user_login");
    if (jvbroadcasterUserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.broadcasterUserLogin, ec,
                        *jvbroadcasterUserLogin))
    {
        return;
    }
    const auto *jvbroadcasterUserName =
        root.if_contains("broadcaster_user_name");
    if (jvbroadcasterUserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.broadcasterUserName, ec, *jvbroadcasterUserName))
    {
        return;
    }
    const auto *jvchatterUserID = root.if_contains("chatter_user_id");
    if (jvchatterUserID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.chatterUserID, ec, *jvchatterUserID))
    {
        return;
    }
    const auto *jvchatterUserLogin = root.if_contains("chatter_user_login");
    if (jvchatterUserLogin == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.chatterUserLogin, ec, *jvchatterUserLogin))
    {
        return;
    }
    const auto *jvchatterUserName = root.if_contains("chatter_user_name");
    if (jvchatterUserName == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.chatterUserName, ec, *jvchatterUserName))
    {
        return;
    }
    const auto *jvcolor = root.if_contains("color");
    if (jvcolor == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.color, ec, *jvcolor))
    {
        return;
    }

    const auto *jvbadges = root.if_contains("badges");
    if (jvbadges != nullptr && !jvbadges->is_null())
    {
        if (!json::fromJson(target.badges, ec, *jvbadges))
        {
            return;
        }
    }
    const auto *jvmessageID = root.if_contains("message_id");
    if (jvmessageID == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.messageID, ec, *jvmessageID))
    {
        return;
    }
    const auto *jvmessageType = root.if_contains("message_type");
    if (jvmessageType == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.messageType, ec, *jvmessageType))
    {
        return;
    }
    const auto *jvmessage = root.if_contains("message");
    if (jvmessage == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.message, ec, *jvmessage))
    {
        return;
    }
    const auto *jvcheer = root.if_contains("cheer");
    if (jvcheer != nullptr && !jvcheer->is_null())
    {
        if (!json::fromJson(target.cheer.emplace(), ec, *jvcheer))
        {
            return;
        }
    }

    const auto *jvreply = root.if_contains("reply");
    if (jvreply != nullptr && !jvreply->is_null())
    {
        if (!json::fromJson(target.reply.emplace(), ec, *jvreply))
        {
            return;
        }
    }

    const auto *jvchannelPointsCustomRewardID =
        root.if_contains("channel_points_custom_reward_id");
    if (jvchannelPointsCustomRewardID != nullptr &&
        !jvchannelPointsCustomRewardID->is_null())
    {
        if (!json::fromJson(target.channelPointsCustomRewardID.emplace(), ec,
                            *jvchannelPointsCustomRewardID))
        {
            return;
        }
    }
}

void tag_invoke(json::FromJsonTag<Payload> /* tag */, Payload &target,
                boost::system::error_code &ec, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_object())
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::ExpectedObject);
    }
    const auto &root = jvRoot.get_object();

    const auto *jvsubscription = root.if_contains("subscription");
    if (jvsubscription == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.subscription, ec, *jvsubscription))
    {
        return;
    }
    const auto *jvevent = root.if_contains("event");
    if (jvevent == nullptr)
    {
        EVENTSUB_INTO_BAIL_HERE(error::Kind::FieldMissing);
    }

    if (!json::fromJson(target.event, ec, *jvevent))
    {
        return;
    }
}

}  // namespace chatterino::eventsub::lib::payload::channel_chat_message::v1
