---@meta Chatterino2

-- This file is automatically generated from src/controllers/plugins/LuaAPI.hpp by the scripts/make_luals_meta.py script
-- This file is intended to be used with LuaLS (https://luals.github.io/).
-- Add the folder this file is in to "Lua.workspace.library".

c2 = {}
---@enum c2.LogLevel
c2.LogLevel = {
    Debug = {}, ---@type c2.LogLevel.Debug
    Info = {}, ---@type c2.LogLevel.Info
    Warning = {}, ---@type c2.LogLevel.Warning
    Critical = {}, ---@type c2.LogLevel.Critical
}

-- Begin src/controllers/plugins/api/EventType.hpp

---@enum c2.EventType
c2.EventType = {
    CompletionRequested = {}, ---@type c2.EventType.CompletionRequested
}

-- End src/controllers/plugins/api/EventType.hpp

---@class CommandContext
---@field words string[] The words typed when executing the command. For example `/foo bar baz` will result in `{"/foo", "bar", "baz"}`.
---@field channel c2.Channel The channel the command was executed in.

---@class CompletionList
---@field values string[] The completions
---@field hide_others boolean Whether other completions from Chatterino should be hidden/ignored.

---@class CompletionEvent
---@field query string The word being completed
---@field full_text_content string Content of the text input
---@field cursor_position integer Position of the cursor in the text input in unicode codepoints (not bytes)
---@field is_first_word boolean True if this is the first word in the input

-- Begin src/common/Channel.hpp

---@enum c2.ChannelType
c2.ChannelType = {
    None = {}, ---@type c2.ChannelType.None
    Direct = {}, ---@type c2.ChannelType.Direct
    Twitch = {}, ---@type c2.ChannelType.Twitch
    TwitchWhispers = {}, ---@type c2.ChannelType.TwitchWhispers
    TwitchWatching = {}, ---@type c2.ChannelType.TwitchWatching
    TwitchMentions = {}, ---@type c2.ChannelType.TwitchMentions
    TwitchLive = {}, ---@type c2.ChannelType.TwitchLive
    TwitchAutomod = {}, ---@type c2.ChannelType.TwitchAutomod
    TwitchEnd = {}, ---@type c2.ChannelType.TwitchEnd
    Misc = {}, ---@type c2.ChannelType.Misc
}

-- End src/common/Channel.hpp

-- Begin src/controllers/plugins/api/ChannelRef.hpp

-- Begin src/providers/twitch/TwitchChannel.hpp

---@class StreamStatus
---@field live boolean
---@field viewer_count number
---@field title string Stream title or last stream title
---@field game_name string
---@field game_id string
---@field uptime number Seconds since the stream started.

---@class RoomModes
---@field subscriber_only boolean
---@field unique_chat boolean You might know this as r9kbeta or robot9000.
---@field emotes_only boolean Whether or not text is allowed in messages. Note that "emotes" here only means Twitch emotes, not Unicode emoji, nor 3rd party text-based emotes
---@field follower_only number? Time in minutes you need to follow to chat or nil.
---@field slow_mode number? Time in seconds you need to wait before sending messages or nil.

-- End src/providers/twitch/TwitchChannel.hpp

---@class c2.Channel
c2.Channel = {}

--- Returns true if the channel this object points to is valid.
--- If the object expired, returns false
--- If given a non-Channel object, it errors.
---
---@return boolean success
function c2.Channel:is_valid() end

--- Gets the channel's name. This is the lowercase login name.
---
---@return string name
function c2.Channel:get_name() end

--- Gets the channel's type
---
---@return c2.ChannelType
function c2.Channel:get_type() end

--- Get the channel owner's display name. This may contain non-lowercase ascii characters.
---
---@return string name
function c2.Channel:get_display_name() end

--- Sends a message to the target channel.
--- Note that this does not execute client-commands.
---
---@param message string
---@param execute_commands? boolean Should commands be run on the text?
function c2.Channel:send_message(message, execute_commands) end

--- Adds a system message client-side
---
---@param message string
function c2.Channel:add_system_message(message) end

--- Returns true for twitch channels.
--- Compares the channel Type. Note that enum values aren't guaranteed, just
--- that they are equal to the exposed enum.
---
---@return boolean
function c2.Channel:is_twitch_channel() end

--- Returns a copy of the channel mode settings (subscriber only, r9k etc.)
---
---@return RoomModes
function c2.Channel:get_room_modes() end

--- Returns a copy of the stream status.
---
---@return StreamStatus
function c2.Channel:get_stream_status() end

--- Returns the Twitch user ID of the owner of the channel.
---
---@return string
function c2.Channel:get_twitch_id() end

--- Returns true if the channel is a Twitch channel and the user owns it
---
---@return boolean
function c2.Channel:is_broadcaster() end

--- Returns true if the channel is a Twitch channel and the user is a moderator in the channel
--- Returns false for broadcaster.
---
---@return boolean
function c2.Channel:is_mod() end

--- Returns true if the channel is a Twitch channel and the user is a VIP in the channel
--- Returns false for broadcaster.
---
---@return boolean
function c2.Channel:is_vip() end

---@return string
function c2.Channel:__tostring() end

--- Finds a channel by name.
--- Misc channels are marked as Twitch:
--- - /whispers
--- - /mentions
--- - /watching
--- - /live
--- - /automod
---
---@param name string Which channel are you looking for?
---@return c2.Channel?
function c2.Channel.by_name(name) end

--- Finds a channel by the Twitch user ID of its owner.
---
---@param id string ID of the owner of the channel.
---@return c2.Channel?
function c2.Channel.by_twitch_id(id) end

-- End src/controllers/plugins/api/ChannelRef.hpp

-- Begin src/controllers/plugins/api/HTTPResponse.hpp

---@class c2.HTTPResponse
c2.HTTPResponse = {}

--- Returns the data. This is not guaranteed to be encoded using any
--- particular encoding scheme. It's just the bytes the server returned.
---
---@return string
---@nodiscard
function c2.HTTPResponse:data() end

--- Returns the status code.
---
---@return number|nil
---@nodiscard
function c2.HTTPResponse:status() end

--- A somewhat human readable description of an error if such happened
---
---@return string
---@nodiscard
function c2.HTTPResponse:error() end

---@return string
---@nodiscard
function c2.HTTPResponse:__tostring() end

-- End src/controllers/plugins/api/HTTPResponse.hpp

-- Begin src/controllers/plugins/api/HTTPRequest.hpp

---@alias c2.HTTPCallback fun(result: c2.HTTPResponse): nil
---@class c2.HTTPRequest
c2.HTTPRequest = {}

--- Sets the success callback
---
---@param callback c2.HTTPCallback Function to call when the HTTP request succeeds
function c2.HTTPRequest:on_success(callback) end

--- Sets the failure callback
---
---@param callback c2.HTTPCallback Function to call when the HTTP request fails or returns a non-ok status
function c2.HTTPRequest:on_error(callback) end

--- Sets the finally callback
---
---@param callback fun(): nil Function to call when the HTTP request finishes
function c2.HTTPRequest:finally(callback) end

--- Sets the timeout
---
---@param timeout integer How long in milliseconds until the times out
function c2.HTTPRequest:set_timeout(timeout) end

--- Sets the request payload
---
---@param data string
function c2.HTTPRequest:set_payload(data) end

--- Sets a header in the request
---
---@param name string
---@param value string
function c2.HTTPRequest:set_header(name, value) end

--- Executes the HTTP request
---
function c2.HTTPRequest:execute() end

---@return string
function c2.HTTPRequest:__tostring() end

--- Creates a new HTTPRequest
---
---@param method c2.HTTPMethod Method to use
---@param url string Where to send the request to
---@return c2.HTTPRequest
function c2.HTTPRequest.create(method, url) end

-- End src/controllers/plugins/api/HTTPRequest.hpp

-- Begin src/controllers/plugins/api/Ui.hpp

-- Begin src/widgets/splits/SplitContainer.hpp

---@enum c2.SplitContainerNodeType
c2.SplitContainerNodeType = {
    EmptyRoot = {}, ---@type c2.SplitContainerNodeType.EmptyRoot
    Split = {}, ---@type c2.SplitContainerNodeType.Split
    VerticalContainer = {}, ---@type c2.SplitContainerNodeType.VerticalContainer
    HorizontalContainer = {}, ---@type c2.SplitContainerNodeType.HorizontalContainer
}

-- End src/widgets/splits/SplitContainer.hpp

-- Begin src/widgets/Window.hpp

---@enum c2.WindowType
c2.WindowType = {
    Main = {}, ---@type c2.WindowType.Main
    Popup = {}, ---@type c2.WindowType.Popup
    Attached = {}, ---@type c2.WindowType.Attached
}

-- End src/widgets/Window.hpp



---@class c2.Split
---@field channel c2.Channel The channel open in this split (might be empty)
c2.Split = {}

---@class c2.SplitContainerNode A node in a split container
---@field type c2.SplitContainerNodeType The type of this node
---@field split c2.Split|nil The split contained in this code (if this is a split node)
c2.SplitContainerNode = {}

---Gets all children of this node.
---@return c2.SplitContainerNode[] children
function c2.SplitContainerNode:get_children() end

---@class c2.SplitContainer A container with potentially multiple splits
---@field selected_split c2.Split The currently selected split.
---@field base_node c2.SplitContainerNode The top level node.
c2.SplitContainer = {}

---Create a new popup window with this split container set as the only tab
function c2.SplitContainer:popup() end

---Gets all splits contained in this container
---@return c2.Split[] splits
function c2.SplitContainer:get_splits() end

---@class c2.Notebook
---@field page_count integer The number of pages/tabs.
c2.Notebook = {}

---@param i integer The zero based index of the page.
---@return c2.SplitContainer|nil page The page contained at the specified index (zero based).
function c2.Notebook:get_page_at(i) end

---@class c2.SplitNotebook : c2.Notebook
---@field selected_page c2.SplitContainer|nil The currently selected page.
c2.SplitNotebook = {}

---@class QWidget
QWidget = {}

---Closes the window if this widget is a window.
---@return boolean was_closed
function QWidget:close() end

---@class c2.BaseWidget : QWidget
c2.BaseWidget = {}

---@class c2.BaseWindow : c2.BaseWidget
c2.BaseWindow = {}

---@class c2.Window : c2.BaseWindow
---@field notebook c2.SplitNotebook The notebook of this window.
---@field type c2.WindowType The type of this window.
c2.Window = {}

---@class c2.WindowManager
---@field main_window c2.Window The main window.
---@field last_selected_window c2.Window The last selected window (or the main window if none were selected last).
c2.WindowManager = {}

---Open a channel in a new popup
---@param channel c2.Channel The channel to open.
---@return c2.Window window The opened window.
function c2.WindowManager:open_in_popup(channel) end

---Select a split or container
---@param thing c2.Split|c2.SplitContainer The split or container to select.
function c2.WindowManager:select(thing) end

---Gets all open windows.
---@return c2.Window[] windows
function c2.WindowManager:get_windows() end

---@class c2
---@field window_manager c2.WindowManager
c2 = {}
-- End src/controllers/plugins/api/Ui.hpp

-- Begin src/common/network/NetworkCommon.hpp

---@enum c2.HTTPMethod
c2.HTTPMethod = {
    Get = {}, ---@type c2.HTTPMethod.Get
    Post = {}, ---@type c2.HTTPMethod.Post
    Put = {}, ---@type c2.HTTPMethod.Put
    Delete = {}, ---@type c2.HTTPMethod.Delete
    Patch = {}, ---@type c2.HTTPMethod.Patch
}

-- End src/common/network/NetworkCommon.hpp

--- Registers a new command called `name` which when executed will call `handler`.
---
---@param name string The name of the command.
---@param handler fun(ctx: CommandContext) The handler to be invoked when the command gets executed.
---@return boolean ok  Returns `true` if everything went ok, `false` if a command with this name exists.
function c2.register_command(name, handler) end

--- Registers a callback to be invoked when completions for a term are requested.
---
---@param type c2.EventType.CompletionRequested
---@param func fun(event: CompletionEvent): CompletionList The callback to be invoked.
function c2.register_callback(type, func) end

--- Writes a message to the Chatterino log.
---
---@param level c2.LogLevel The desired level.
---@param ... any Values to log. Should be convertible to a string with `tostring()`.
function c2.log(level, ...) end

--- Calls callback around msec milliseconds later. Does not freeze Chatterino.
---
---@param callback fun() The callback that will be called.
---@param msec number How long to wait.
function c2.later(callback, msec) end

